// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`c-tab-buttons one selection is mandatory 1`] = `
CDPPage {
  "_e2eClose": [Function],
  "_e2eElements": Array [
    <c-tab-buttons class="hydrated">
  <mock:shadow-root>
    <div class="c-tab-buttons">
      <slot></slot>
    </div>
  </mock:shadow-root>
  <c-button class="c-button--active hydrated" data-index="0">
    One
  </c-button>
  <c-button class="hydrated" data-index="1">
    Two
  </c-button>
  <c-button class="hydrated" data-index="2">
    Three
  </c-button>
</c-tab-buttons>,
  ],
  "_e2eEventIds": 0,
  "_e2eEvents": Map {},
  "_e2eGoto": [Function],
  "close": [Function],
  "compareScreenshot": [Function],
  "debugger": [Function],
  "emitter": Object {
    "all": Map {
      "console" => Array [
        [Function],
      ],
      "pageerror" => Array [
        [Function],
      ],
      "requestfailed" => Array [
        [Function],
      ],
      "request" => Array [
        [Function],
      ],
    },
    "emit": [Function],
    "off": [Function],
    "on": [Function],
  },
  "eventsMap": Map {
    "console" => Array [
      [Function],
    ],
    "pageerror" => Array [
      [Function],
    ],
    "requestfailed" => Array [
      [Function],
    ],
    "request" => Array [
      [Function],
    ],
  },
  "find": [Function],
  "findAll": [Function],
  "getDiagnostics": [Function],
  "spyOnEvent": [Function],
  "waitForChanges": [Function],
  "waitForEvent": [Function],
}
`;

exports[`c-tab-buttons one selection is mandatory 2`] = `
CDPPage {
  "_e2eClose": [Function],
  "_e2eElements": Array [
    <c-tab-buttons class="hydrated">
  <mock:shadow-root>
    <div class="c-tab-buttons">
      <slot></slot>
    </div>
  </mock:shadow-root>
  <c-button class="hydrated" data-index="0">
    One
  </c-button>
  <c-button class="c-button--active hydrated" data-index="1">
    Two
  </c-button>
  <c-button class="hydrated" data-index="2">
    Three
  </c-button>
</c-tab-buttons>,
    <c-button class="hydrated" data-index="0">
  <mock:shadow-root>
    <button class="grouped" role="button" tabindex="0">
      <div class="c-button c-button--grouped c-button--outlined grouped">
        <div class="c-button__content">
          <slot name="icon"></slot>
          <slot></slot>
        </div>
      </div>
    </button>
  </mock:shadow-root>
  One
</c-button>,
    <c-button class="c-button--active hydrated" data-index="1">
  <mock:shadow-root>
    <button class="grouped" role="button" tabindex="0">
      <div class="c-button c-button--grouped grouped">
        <div class="c-button__content">
          <slot name="icon"></slot>
          <slot></slot>
        </div>
        <div class="animate md-ripple" style="width: 259px; height: 259px; top: -107.5px; left: -1.16406px;"></div>
      </div>
    </button>
  </mock:shadow-root>
  Two
</c-button>,
    <c-button class="hydrated" data-index="2">
  <mock:shadow-root>
    <button class="grouped" role="button" tabindex="0">
      <div class="c-button c-button--grouped c-button--outlined grouped">
        <div class="c-button__content">
          <slot name="icon"></slot>
          <slot></slot>
        </div>
      </div>
    </button>
  </mock:shadow-root>
  Three
</c-button>,
  ],
  "_e2eEventIds": 0,
  "_e2eEvents": Map {},
  "_e2eGoto": [Function],
  "close": [Function],
  "compareScreenshot": [Function],
  "debugger": [Function],
  "emitter": Object {
    "all": Map {
      "console" => Array [
        [Function],
      ],
      "pageerror" => Array [
        [Function],
      ],
      "requestfailed" => Array [
        [Function],
      ],
      "request" => Array [
        [Function],
      ],
    },
    "emit": [Function],
    "off": [Function],
    "on": [Function],
  },
  "eventsMap": Map {
    "console" => Array [
      [Function],
    ],
    "pageerror" => Array [
      [Function],
    ],
    "requestfailed" => Array [
      [Function],
    ],
    "request" => Array [
      [Function],
    ],
  },
  "find": [Function],
  "findAll": [Function],
  "getDiagnostics": [Function],
  "spyOnEvent": [Function],
  "waitForChanges": [Function],
  "waitForEvent": [Function],
}
`;

exports[`c-tab-buttons one selection is mandatory 3`] = `
CDPPage {
  "_e2eClose": [Function],
  "_e2eElements": Array [
    <c-tab-buttons class="hydrated">
  <mock:shadow-root>
    <div class="c-tab-buttons">
      <slot></slot>
    </div>
  </mock:shadow-root>
  <c-button class="hydrated" data-index="0">
    One
  </c-button>
  <c-button class="c-button--active hydrated" data-index="1">
    Two
  </c-button>
  <c-button class="hydrated" data-index="2">
    Three
  </c-button>
</c-tab-buttons>,
    <c-button class="hydrated" data-index="0">
  <mock:shadow-root>
    <button class="grouped" role="button" tabindex="0">
      <div class="c-button c-button--grouped c-button--outlined grouped">
        <div class="c-button__content">
          <slot name="icon"></slot>
          <slot></slot>
        </div>
      </div>
    </button>
  </mock:shadow-root>
  One
</c-button>,
    <c-button class="c-button--active hydrated" data-index="1">
  <mock:shadow-root>
    <button class="grouped" role="button" tabindex="0">
      <div class="c-button c-button--grouped grouped">
        <div class="c-button__content">
          <slot name="icon"></slot>
          <slot></slot>
        </div>
        <div class="animate md-ripple" style="width: 259px; height: 259px; top: -107.5px; left: -1.16406px;"></div>
      </div>
    </button>
  </mock:shadow-root>
  Two
</c-button>,
    <c-button class="hydrated" data-index="2">
  <mock:shadow-root>
    <button class="grouped" role="button" tabindex="0">
      <div class="c-button c-button--grouped c-button--outlined grouped">
        <div class="c-button__content">
          <slot name="icon"></slot>
          <slot></slot>
        </div>
      </div>
    </button>
  </mock:shadow-root>
  Three
</c-button>,
  ],
  "_e2eEventIds": 0,
  "_e2eEvents": Map {},
  "_e2eGoto": [Function],
  "close": [Function],
  "compareScreenshot": [Function],
  "debugger": [Function],
  "emitter": Object {
    "all": Map {
      "console" => Array [
        [Function],
      ],
      "pageerror" => Array [
        [Function],
      ],
      "requestfailed" => Array [
        [Function],
      ],
      "request" => Array [
        [Function],
      ],
    },
    "emit": [Function],
    "off": [Function],
    "on": [Function],
  },
  "eventsMap": Map {
    "console" => Array [
      [Function],
    ],
    "pageerror" => Array [
      [Function],
    ],
    "requestfailed" => Array [
      [Function],
    ],
    "request" => Array [
      [Function],
    ],
  },
  "find": [Function],
  "findAll": [Function],
  "getDiagnostics": [Function],
  "spyOnEvent": [Function],
  "waitForChanges": [Function],
  "waitForEvent": [Function],
}
`;
